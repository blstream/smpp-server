h1. SMPP Server

A project based on the "smppapi":http://smppapi.sourceforge.net/ library that accepts client connections and allows you to easily handle SMPP packets.
"Original version":https://github.com/germanescobar/smpp-server created by German Escobar was adapted to enable asynchronous processing of multiple messages concurrently by PrzemysÅ‚aw Pokrywka.

h2. Building

You build it with Maven >= 2. Download the sources and build it by: mvn install

h2. Starting and stopping

To start the server you need to instantiate the @com.blstream.smppserver.SmppServer@ class and call the @start()@ method:

<pre><code>
SmppServer server = new SmppServer(4444); // 4444 is the port, change it as needed
server.start();
		
// somewhere else
server.stop();
</code></pre>

h2. Processing SMPP packets

To process SMPP packets, you will need to provide an implementation of the @com.blstream.smppserver.PacketProcessor@.
By returning Response.ASYNC_RESPONSE you indicate, that you want to process the packet in some other time. Server will not send the response itself.
Actual response will be sent only when you call sendResponseBackToESME on the SendResponseAction object passed as a parameter.

<pre><code>
public class MyPacketProcessor implements PacketProcessor {

	private Timer timer = new Timer(true);

	@Override		
	public Response processPacket(SMPPPacket packet, final SMPPResponse response, final SendResponseAction sender) {
				
		if (packet.getCommandId() == SMPPPacket.BIND_RECEIVER
	   	 		|| packet.getCommandId() == SMPPPacket.BIND_TRANSCEIVER
	   	 		|| packet.getCommandId() == SMPPPacket.BIND_TRANSMITTER) {
	   	 		
	   	 	// check the credentials and return the corresponding SMPP command status
	   	 	return Response.OK;
	   	 					
	   	 } else {
			TimerTask task = new TimerTask() {
						
				public void run() {
					sender.sendResponseBackToESME(Response.OK);
				}
			};
			// send appropriate response, but only after some specified time
			timer.schedule(task, 2000);
			return Response.ASYNC_RESPONSE;
		}
	}
}

</code></pre> 

To use your @PacketProcessor@ implementation, set it in the @SmppServer@ using the constructor or the setter method:

<pre><code>
SmppServer server = new SmppServer(4444, new MyPacketProcessor());
		
// or
		
server.setPacketProcessor(new MyPacketProcessor());
</code></pre>

If you don't provide a @PacketProcessor@ implementation, the default one (that always returns @Response.OK@) will be used.

h2. Using optional parameters (TLVs)

You can set custom TLVs by manipulating the SMPPResponse object, a parameter of PacketProcessor.processPacket
method.
<pre><code>
            TLVTable tlvs = new TLVTable();
            tlvs.set(Tag.MESSAGE_PAYLOAD, "hello response tlvs!".getBytes());
            response.setTLVTable(tlvs);
</code></pre>
If you want to receive optional parameters from clients, don't forget to set
<pre><code>
            table.set(Tag.SC_INTERFACE_VERSION, Integer.valueOf(0x34))
</code></pre>
in your bind response, otherwise clients conforming to SMPP 3.4 specification will have to assume,
that your server doesn't handle them.

h2. Sending SMPP requests to the client

You can also send requests to the client (e.g. deliver_sm or unbind) through a session. For example:

<pre><code>
// first, we need to find the session to which we want to send the request
SmppSession targetSession = null;

Collection<SmppSession> sessions = server.getSessions();
for (SmppSession s : sessions) {
	// check if this is the session we are looking for
	if (s.getSystemId().equals("test") && s.getBindType().equals(BindType.TRANSCEIVER)) {
		targetSession = s;
	}
}

// create the request and send it
DeliverSM ds = new DeliverSM();
// ... set other fields

targetSession.sendRequest(ds);

</code></pre>

That's it! As you can see, you can accept SMPP client connections, process incoming SMPP packets in both synchronous and asynchronous modes and send requests to the clients.
